; Generated by holtek-gcc v3.19, Tue Jul 23 17:13:52 2019
; 
; Configuration:
;       without long instruction
;       Single ROM, Multi-RAM
;       bits_per_rom_unit:16
;       with mp1
;       with tbhp, address(0x9)
;          Use tabrd-const
;       
;       
;       
; use 'tabrdc' instead of 'tabrd'
;       

#pragma translator "holtek-gcc 4.6.4" "3.19" "build 20130711"
; Rebuild 115

ir equ [2]
mp equ [3]
sbp equ [1]
acc equ [5]
bp equ [4]
tblp equ [7]
tbhp equ [9]
status equ [10]
c equ [10].0
ac equ [10].1
z equ [10].2
ov equ [10].3
intc equ [11]

extern ra:byte
extern rb:byte
extern rc:byte
extern rd:byte
extern re:byte
extern rf:byte
extern rg:byte
extern rh:byte
extern _Crom2Prom:near
extern _Crom2PromNext:near

RAMBANK 0 @HCCINIT, @HCCINIT0

RAMBANK 0 @BITDATASEC, @BITDATASEC1
@HCCINIT	.section 'data'
@HCCINIT0	.section 'data'
@BITDATASEC	 .section 'data'
@BITDATASEC1	 .section 'data'

#pragma debug scope 1 1
	extern __DELAY3:near
	extern __DELAYX3:near
	extern __DELAYX6:near
	extern __DELAYY5:near
	extern __DELAYY3:near
	extern _builtin_holtek_delay_2:byte
___sadc0 equ [34]
___sadc1 equ [35]
___sadc2 equ [36]
___acerl equ [67]
___sadol equ [32]
___sadoh equ [33]
public _fun_Get_ADC
#pragma debug scope 2 1
#line 24 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
_fun_Get_ADC .section 'code'
_fun_Get_ADC proc
    local _fun_Get_ADC_2 db 1 dup(?)	; 0,1
	mov ra,a
	mov _fun_Get_ADC_2[0],a
#pragma debug variable 8 2 _fun_Get_ADC_2+0 "lu8c_adc_channel"
#line 27 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,55
	mov [34],a
#line 28 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,35
	mov [35],a
#line 29 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [36]
#line 31 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [67]
#line 33 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,ra
	sub a,0
	sz z
	jmp _L3
	sub a,(1)-(0)
	sz z
	jmp _L4
#line 33 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,ra
	sub a,2
	sz z
	jmp _L5
	sub a,(3)-(2)
	sz z
	jmp _L6
	mov a,ra
	sub a,4
	sz z
	jmp _L7
	sub a,(5)-(4)
	sz z
	jmp _L8
	mov a,ra
	sub a,6
	snz z
	jmp _L2
#line 41 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [34].0
	jmp _L2
_L3:
#line 35 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,248
	andm a,[34]
	jmp _L2
_L4:
#line 36 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,249
	andm a,[34]
	jmp _L2
_L5:
#line 37 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,250
	andm a,[34]
	jmp _L2
_L6:
#line 38 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [34].2
	jmp _L2
_L7:
#line 39 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,252
	andm a,[34]
	jmp _L2
_L8:
#line 40 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [34].1
_L2:
#line 45 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	set [34].5
#line 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF 20>263690
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	ERRMESSAGE 'the value 20of the argument exceeds the maxinum 263690'
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF 20<0
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	ERRMESSAGE 'the value 20 of the argument exceeds the mininum 0'
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF 20==0
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	JMP $
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF 20==1
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	NOP
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF 20==2
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	NOP
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	NOP
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF 20==3
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	NOP
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	NOP
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	NOP
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF (20<8) AND (20>3)
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	CALL __DELAY3 + 7 -20
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF (20< 0404h) AND (20>7)
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	MOV A,20/4-1
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	CALL __DELAYX3 + 3 -(20 MOD 4)
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF (20< 0x40B) AND (20> 0403h)
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	MOV A,0 
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	CALL __DELAYX6 + 0x40a -20
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF (20 >= 0x40b) AND ((((20-9)%0402h)/4+1)>256)
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	MOV A,(20-9)/0402h
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	MOV _builtin_holtek_delay_2,A
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	MOV A,0
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	CALL __DELAYY5 +5- (((20-9)%0402h)%6)
	ENDIF
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	IF (20 >= 0x40b) AND ((((20-9)%0402h)/4+1)<=256)
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	MOV A,(20-9)/0402h
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	MOV _builtin_holtek_delay_2,A
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	MOV A,((20-9)%0402h)/4+1
;# 47 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	CALL __DELAYY3 +3-(((20-9)%0402h)%4)
	ENDIF
#line 48 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [34].7
#line 49 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	set [34].7
#line 50 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [34].7
_L12:
#line 51 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	sz [34].6
	jmp _L12
#line 54 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,[32]
	mov rb,a
#line 55 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,[33]
	mov rc,a
#line 56 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [34].7
#line 57 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [34].7
#line 59 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,rb
	mov ra,a
	mov a,rc
	mov rb,a
	mov a,4
_LI1:
	clr c
	rrc rb
	rrc ra
	sdz acc
	jmp _LI1
	ret
_fun_Get_ADC endp
#line 59 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
#pragma debug scope 1 1
public _fun_Disable_ADC
#pragma debug scope 3 1
#line 103 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
_fun_Disable_ADC .section 'code'
_fun_Disable_ADC proc
#line 104 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	clr [34].5
	ret
_fun_Disable_ADC endp
#line 104 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
#pragma debug scope 1 1
public _TEST_ADC
#pragma debug scope 4 1
#line 115 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
_TEST_ADC .section 'code'
_TEST_ADC proc
_L16:
#line 119 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
;# 119 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c" 1
	clr wdt
#line 120 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
	mov a,6
	call _fun_Get_ADC
	jmp _L16
	ret
_TEST_ADC endp
#line 120 "C:\ChipsGarden\醇法\MK8002D\UARTtoI2Cwith8bitsMCU\ADC.c"
#pragma debug scope 1 1
#pragma debug variable 8 1 ___sadol "__sadol" 1
#pragma debug variable 8 1 ___sadoh "__sadoh" 1
#pragma debug struct_begin 42 "__sadc0_bits"
#pragma debug field 21 8 0 1 "__sacs0" ;0,1
#pragma debug field 21 8 0 1 "__sacs1" ;1,1
#pragma debug field 21 8 0 1 "__sacs2" ;2,1
#pragma debug field 21 8 0 1 ;3,1
#pragma debug field 21 8 0 1 "__adrfs" ;4,1
#pragma debug field 21 8 0 1 "__enadc" ;5,1
#pragma debug field 21 8 0 1 "__adbz" ;6,1
#pragma debug field 21 8 0 1 "__start" ;7,1
#pragma debug struct_end
#pragma debug union_begin 43 ""
#pragma debug field 2 42 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 43 1 ___sadc0 "__sadc0" 1
#pragma debug struct_begin 44 "__sadc1_bits"
#pragma debug field 21 8 0 1 "__sacks0" ;0,1
#pragma debug field 21 8 0 1 "__sacks1" ;1,1
#pragma debug field 21 8 0 1 "__sacks2" ;2,1
#pragma debug field 21 8 0 2 ;3,2
#pragma debug field 21 8 0 1 "__sains0" ;5,1
#pragma debug field 21 8 0 1 "__sains1" ;6,1
#pragma debug field 21 8 0 1 "__sains2" ;7,1
#pragma debug struct_end
#pragma debug union_begin 45 ""
#pragma debug field 2 44 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 45 1 ___sadc1 "__sadc1" 1
#pragma debug struct_begin 46 "__sadc2_bits"
#pragma debug field 21 8 0 1 "__savrs0" ;0,1
#pragma debug field 21 8 0 1 "__savrs1" ;1,1
#pragma debug field 21 8 0 1 "__savrs2" ;2,1
#pragma debug field 21 8 0 1 "__savrs3" ;3,1
#pragma debug field 21 8 0 1 "__vrefo" ;4,1
#pragma debug field 21 8 0 1 "__vrefi" ;5,1
#pragma debug field 21 8 0 1 "__vbgen" ;6,1
#pragma debug field 21 8 0 1 "__enopa" ;7,1
#pragma debug struct_end
#pragma debug union_begin 47 ""
#pragma debug field 2 46 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 47 1 ___sadc2 "__sadc2" 1
#pragma debug struct_begin 48 "__acerl_bits"
#pragma debug field 21 8 0 1 "__ace0" ;0,1
#pragma debug field 21 8 0 1 "__ace1" ;1,1
#pragma debug field 21 8 0 1 "__ace2" ;2,1
#pragma debug field 21 8 0 1 "__ace3" ;3,1
#pragma debug field 21 8 0 1 "__ace4" ;4,1
#pragma debug field 21 8 0 1 "__ace5" ;5,1
#pragma debug field 21 8 0 1 "__ace6" ;6,1
#pragma debug field 21 8 0 1 "__ace7" ;7,1
#pragma debug struct_end
#pragma debug union_begin 49 ""
#pragma debug field 2 48 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 49 1 ___acerl "__acerl" 1

; 
; Generated by holtek-gcc v3.19, Tue Jul 23 17:13:52 2019
; Rebuild 115
; end of file
